openapi: 3.1.0
info:
  title: Obsidian Vault REST API
  version: 1.0.0
servers:
  - url: http://localhost/api
paths:
  /files:
    get:
      summary: List all files in the vault
      responses:
        '200':
          description: List of file paths
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    post:
      summary: Create a new file in the vault
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - path
              properties:
                path:
                  type: string
                type:
                  type: string
                  enum: [file, directory]
                content:
                  type: string
      responses:
        '201':
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '409':
          description: File already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /files/{path}:
    get:
      summary: Get raw content of a file
      parameters:
        - in: path
          name: path
          schema:
            type: string
          required: true
          description: URL-encoded vault-relative path to file
      responses:
        '200':
          description: Raw file content
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update file content
      parameters:
        - in: path
          name: path
          schema:
            type: string
          required: true
          description: URL-encoded vault-relative path to file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a file
      parameters:
        - in: path
          name: path
          schema:
            type: string
          required: true
          description: URL-encoded vault-relative path to file
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /notes:
    get:
      summary: List all markdown notes with parsed front matter
      responses:
        '200':
          description: List of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
    post:
      summary: Create a new note
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteInput'
      responses:
        '201':
          description: Note created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
  /notes/{path}:
    get:
      summary: Retrieve a single note
      parameters:
        - in: path
          name: path
          schema:
            type: string
          required: true
          description: URL-encoded vault-relative path to note
      responses:
        '200':
          description: Note object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Replace a note
      parameters:
        - in: path
          name: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteInput'
      responses:
        '200':
          description: Note replaced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update parts of a note
      parameters:
        - in: path
          name: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                front_matter:
                  type: object
                content:
                  type: string
      responses:
        '200':
          description: Note updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a note
      parameters:
        - in: path
          name: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Note deleted (no content)
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bulk/notes/delete:
    delete:
      summary: Delete multiple notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteInput'
      responses:
        '200':
          description: Bulk delete result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkDeleteResult'
  /bulk/notes/update:
    patch:
      summary: Update multiple notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateInput'
      responses:
        '200':
          description: Bulk update result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUpdateResult'
  /metadata/keys:
    get:
      summary: List all front matter keys across notes
      responses:
        '200':
          description: Unique front matter keys
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /metadata/values/{key}:
    get:
      summary: List unique values for a front matter key
      parameters:
        - in: path
          name: key
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Unique values
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: number
components:
  schemas:
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
        path:
          type: string
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
    Note:
      type: object
      properties:
        path:
          type: string
        front_matter:
          type: object
        content:
          type: string
    NoteInput:
      type: object
      required:
        - path
      properties:
        path:
          type: string
        front_matter:
          type: object
        content:
          type: string
    BulkDeleteInput:
      type: object
      required:
        - paths
      properties:
        paths:
          type: array
          items:
            type: string
    BulkDeleteResult:
      type: object
      properties:
        deleted:
          type: array
          items:
            type: string
        notFound:
          type: array
          items:
            type: string
    BulkUpdateInput:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NoteUpdate'
    BulkUpdateResult:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
              status:
                type: string
              note:
                $ref: '#/components/schemas/Note'
    NoteUpdate:
      type: object
      required:
        - path
      properties:
        path:
          type: string
        front_matter:
          type: object
        content:
          type: string